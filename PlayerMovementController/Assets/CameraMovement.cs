//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/CameraMovement.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CameraMovement: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CameraMovement()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CameraMovement"",
    ""maps"": [
        {
            ""name"": ""Camera Controls"",
            ""id"": ""f6384aee-3a7d-4159-9a36-227578eb6f29"",
            ""actions"": [
                {
                    ""name"": ""CircleL"",
                    ""type"": ""Value"",
                    ""id"": ""e99734b7-7102-4f68-8585-5d06c26a77d0"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CircleR"",
                    ""type"": ""Button"",
                    ""id"": ""b86e7aab-c5e2-4107-be5d-d107677d442f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""56d37d92-8abc-434f-bc4c-7ee628fa4da8"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CircleL"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""089def10-1e4c-499a-8597-3d84ddd0ff34"",
                    ""path"": ""<Gamepad>/rightStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CircleL"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5c294199-fab0-4cf1-bbf6-84253ae118d1"",
                    ""path"": ""<Gamepad>/rightStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CircleR"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""572e9772-6aab-417a-a331-1ac3d49989bf"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CircleR"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Camera Controls
        m_CameraControls = asset.FindActionMap("Camera Controls", throwIfNotFound: true);
        m_CameraControls_CircleL = m_CameraControls.FindAction("CircleL", throwIfNotFound: true);
        m_CameraControls_CircleR = m_CameraControls.FindAction("CircleR", throwIfNotFound: true);
    }

    ~@CameraMovement()
    {
        UnityEngine.Debug.Assert(!m_CameraControls.enabled, "This will cause a leak and performance issues, CameraMovement.CameraControls.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Camera Controls
    private readonly InputActionMap m_CameraControls;
    private List<ICameraControlsActions> m_CameraControlsActionsCallbackInterfaces = new List<ICameraControlsActions>();
    private readonly InputAction m_CameraControls_CircleL;
    private readonly InputAction m_CameraControls_CircleR;
    public struct CameraControlsActions
    {
        private @CameraMovement m_Wrapper;
        public CameraControlsActions(@CameraMovement wrapper) { m_Wrapper = wrapper; }
        public InputAction @CircleL => m_Wrapper.m_CameraControls_CircleL;
        public InputAction @CircleR => m_Wrapper.m_CameraControls_CircleR;
        public InputActionMap Get() { return m_Wrapper.m_CameraControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraControlsActions set) { return set.Get(); }
        public void AddCallbacks(ICameraControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraControlsActionsCallbackInterfaces.Add(instance);
            @CircleL.started += instance.OnCircleL;
            @CircleL.performed += instance.OnCircleL;
            @CircleL.canceled += instance.OnCircleL;
            @CircleR.started += instance.OnCircleR;
            @CircleR.performed += instance.OnCircleR;
            @CircleR.canceled += instance.OnCircleR;
        }

        private void UnregisterCallbacks(ICameraControlsActions instance)
        {
            @CircleL.started -= instance.OnCircleL;
            @CircleL.performed -= instance.OnCircleL;
            @CircleL.canceled -= instance.OnCircleL;
            @CircleR.started -= instance.OnCircleR;
            @CircleR.performed -= instance.OnCircleR;
            @CircleR.canceled -= instance.OnCircleR;
        }

        public void RemoveCallbacks(ICameraControlsActions instance)
        {
            if (m_Wrapper.m_CameraControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraControlsActions @CameraControls => new CameraControlsActions(this);
    public interface ICameraControlsActions
    {
        void OnCircleL(InputAction.CallbackContext context);
        void OnCircleR(InputAction.CallbackContext context);
    }
}
